Resources:
  AgentVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AgentVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AgentVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AgentVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: false

  NATIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATIPAddress.AllocationId
      SubnetId: !Ref PublicSubnet  # NAT Gateway in public subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AgentVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AgentVPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref AgentVPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0'

  AgentCluster:
    Type: AWS::ECS::Cluster

  DockerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: python-agent-example

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecsTaskExecutionRole  # You can name this role, or let CloudFormation name it
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: ECSTaskExecutionAndSecretsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  # Permissions for AWS Secrets Manager and Systems Manager Parameter Store
                  - secretsmanager:GetSecretValue
                  - ssm:GetParameters
                  - ssm:GetParameter
                  - ssm:DescribeParameters
                  - kms:Decrypt  # Needed if secrets are encrypted with KMS

                  # Permissions for pulling container images from Amazon ECR
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage

                  # Permissions for CloudWatch Logs
                  - logs:CreateLogStream
                  - logs:PutLogEvents

                  # Permissions for accessing S3 (if needed)
                  - s3:GetObject
                Resource: "*"

  PythonAgentExampleLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/ecs/python-agent-example"
      RetentionInDays: 14  # Adjust retention as needed

  PythonAgentExampleTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Cpu: "2048"
      Memory: "4096"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: python-agent-example 
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${DockerRepository}:latest"
          Essential: true
          Secrets:
            - Name: LIVEKIT_URL
              ValueFrom: arn:aws:secretsmanager:us-east-1:203125320322:secret:ecs/python-agent-example/livekit-url-<unique-id>
            - Name: LIVEKIT_API_KEY
              ValueFrom: arn:aws:secretsmanager:us-east-1:203125320322:secret:ecs/python-agent-example/livekit-api-key-<unique-id>
            - Name: LIVEKIT_API_SECRET
              ValueFrom: arn:aws:secretsmanager:us-east-1:203125320322:secret:ecs/python-agent-example/livekit-api-secret-<unique-id>
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref PythonAgentExampleLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: python-agent

  PythonAgentExampleService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref AgentCluster 
      DesiredCount: 1 # Initially set to 0 because the image doesn't exist yet
      TaskDefinition: !Ref PythonAgentExampleTaskDefinition 
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet 
          SecurityGroups:
            - !Ref SecurityGroup 